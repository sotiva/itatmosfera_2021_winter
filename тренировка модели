// обучем линейный классификатор текстовым функциям

import sys

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import Perceptron
from sklearn.pipeline import Pipeline
from sklearn.datasets import load_files
from sklearn.model_selection import train_test_split
from sklearn import metrics


# Папка с обучающими данными должна быть передана в качестве первого аргумента
languages_data_folder = sys.argv[1]
набор данных = load_files(папка languages_data_folder)
# Разделить набор данных в наборе для обучения и тестирования:
docs_train, docs_test, y_train, y_test = train_test_split(
dataset.данные, dataset.цель, test_size=0,5)


# ЗАДАЧА: Создайте векторизатор, который разбивает строки на последовательности от 1 до 3
# символы вместо словесных знаков

# ЗАДАЧА: Построить конвейер векторизатора/классификатора с использованием предыдущего анализатора
# экземпляр конвейера должен храниться в переменной с именем clf

# ЗАДАЧА: Разместить конвейер на обучающем наборе

# ЗАДАЧА: Предсказать результат тестирования, заданный в переменной с именем y_predicted

# Распечатать отчет о классификации
print(metrics.classification_report(y_test, y_predicted,
                                    target_names=dataset.target_names))

# Построить матрицу 
cm = metrics.confusion_matrix(y_test, y_predicted)
print(cm)

#import matplotlib.pyplot as plt
#plt.matshow(cm, cmap=plt.cm.jet)
#plt.show()

# Предсказать результат по нескольким коротким новым предложениям:
sentences = [
    'This is a language detection test.',
    'Ceci est un test de d\xe9tection de la langue.',
    'Dies ist ein Test, um die Sprache zu erkennen.',
]
predicted = clf.predict(sentences)

for s, p in zip(sentences, predicted):
    print('The language of "%s" is "%s"' % (s, dataset.target_names[p]))
